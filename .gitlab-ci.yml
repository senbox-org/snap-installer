include:
  - project: 'to-be-continuous/docker'
    ref: '5.11.0'
    file: '/templates/gitlab-ci-docker.yml'

variables:
  BUILD_FOR_INSTALLER: "true"
  MAVEN_DEPLOY_ARGS: deploy
  MAVEN_CLI_OPTS: $MAVEN_CLI_OPTS -U -q
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=${MAVEN_CFG_DIR}/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
    -Dnetbeans.verify.integrity=false
  # -Dmaven.test.skip=true
  DOCKER_REGISTRY_MIRROR: docker.snap-ci.ovh
  DOCKER_REGISTRY_USER: $NEXUS_USER
  DOCKER_REGISTRY_PASSWORD: $NEXUS_PASSWORD
  DOCKER_FILE: "docker/build/Dockerfile"
  DOCKER_CONTEXT_PATH: "${CI_PROJECT_DIR}"
  DOCKER_SNAPSHOT_IMAGE: "$NEXUS_URL/$CI_PROJECT_NAME:13.0.0-snapshot"
  DOCKER_RELEASE_IMAGE: "$NEXUS_URL/$CI_PROJECT_NAME:13.0.0"
  DOCKER_TRIVY_ARGS: "--ignore-unfixed --vuln-type os --debug --timeout 15m"
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: CRITICAL
  DOCKER_BUILD_ARGS: "--cache=true --compressed-caching=false --use-new-run --cleanup --build-arg LICENSE=${INSTALL4J_LICENSE} --build-arg=UPLOAD_URL --build-arg=NEXUS_USER --build-arg=NEXUS_PASS --target=unix"
  DOCKER_HADOLINT_ARGS: --failure-threshold error
  DOCKER_PROD_PUBLISH_STRATEGY: auto
  DOCKER_BUILD_CACHE_DISABLED: "true"
  COMPILE_BRANCH: master
  # RECOMPILE: "true"
  RECOMPILE:
    description: When other projects should be recompiled or if artifacts are already safe to get from COMPILE_BRANCH
    value: "true"
    options:
    - "true"
    - "false"
  # Trigger pipelines via API for the following projects to bypass downstream multiproject trigger limited to 5 projects
  GITLAB_API_URL: "https://gitlab.com/api/v4"
  PROJECT_ENGINE: '{"ID" : "42613488", "TOKEN" : "$TRIGGER_TOKEN_ENGINE"}'
  PROJECT_DESKTOP: '{"ID" : "42613585", "TOKEN" : "$TRIGGER_TOKEN_DESKTOP"}'
  PROJECTS: '[
      {"ID" : "45963970", "TOKEN" : "$TRIGGER_TOKEN_MICROWAVE"}, 
      {"ID" : "45964007", "TOKEN" : "$TRIGGER_TOKEN_OPTICAL"},
      {"ID" : "46471532", "TOKEN" : "$TRIGGER_TOKEN_ESA_SNAPPY"},
      {"ID" : "44112186", "TOKEN" : "$TRIGGER_TOKEN_SMOS_BOX"}
    ]' 

stages:
  - compile
  - build
  - package-build
  - package-test
  - publish
  - gpt-tests

# Compile other projects first to get freshly built artifacts
.compile:
  stage: compile
  rules:
    - if: $RECOMPILE == "true"
      when: always
    - if: $RECOMPILE == "false"
      when: never
    # - if: $BRANCH
    #   variables:
    #     COMPILE_BRANCH: $BRANCH
    # - if: $CI_COMMIT_TAG
    #   variables:
    #     COMPILE_BRANCH: $CI_COMMIT_TAG

# compile-snap-engine:
#   extends: .compile
#   trigger: 
#     project: senbox-org/snap-engine
#     branch: $COMPILE_BRANCH
#     strategy: depend

# compile-snap-desktop:
#   extends: .compile
#   trigger: 
#     project: senbox-org/snap-desktop
#     branch: $COMPILE_BRANCH
#     strategy: depend
#   needs:
#     - job: compile-snap-engine

# Trigger child pipelines to get mvn-build artifacts available (optional, but needed when they have expired)
# compile-others:
#   extends: .compile
#   trigger: 
#     project: $PROJECT
#     branch: $COMPILE_BRANCH
#     strategy: depend
#   parallel:
#     matrix:      
#       - PROJECT: senbox-org/microwave-toolbox
#       - PROJECT: senbox-org/optical-toolbox
#       # - PROJECT: senbox-org/smos-box
#       - PROJECT: senbox-org/esa-snappy
#   needs:
#     - job: compile-snap-engine
#     - job: compile-snap-desktop

compile-snap-engine:
  extends: .compile
  image: alpine
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq
    - mkdir artifacts
  script:    
    - |
      PROJECT_ID=$(echo "$PROJECT_ENGINE" | jq -r '.ID')
      TOKEN=$(echo "$PROJECT_ENGINE" | jq -r '.TOKEN')      
      RESPONSE=$(curl -X POST --fail -F token=$TOKEN -F ref=$COMPILE_BRANCH https://gitlab.com/api/v4/projects/$PROJECT_ID/trigger/pipeline)
      echo "RESPONSE $RESPONSE"
      PIPELINE_ID=$(echo "$RESPONSE" | jq -r '.id')
      echo "Triggered pipeline $PIPELINE_ID for project $PROJECT_ID"
      while true; do        
        echo "Checking pipeline $PIPELINE_ID for project $PROJECT_ID..."
        STATUS=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID" | jq -r '.status')
        echo "Pipeline $PIPELINE_ID status: $STATUS"
        if [[ "$STATUS" == "success" ]]; then
          echo "Pipeline $PIPELINE_ID completed successfully!"
          break          
        elif [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
          echo "Pipeline $PIPELINE_ID failed or was canceled!"
          exit 1
        fi
        sleep 30     
      done
      echo "Fetching job list for pipeline $PIPELINE_ID in project $PROJECT_ID..."
      JOB_ID=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID/jobs" | jq -r '.[] | select(.name=="mvn-build" and .status=="success") | .id' | head -n 1)
      echo "Downloading artifacts from job $JOB_ID in project $PROJECT_ID..."
      curl --silent --location --output "artifacts_$PROJECT_ID.zip" --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/jobs/$JOB_ID/artifacts"
      unzip artifacts_$PROJECT_ID.zip "etc/*" -d artifacts
      unzip artifacts_$PROJECT_ID.zip "LICENSE.html" -d artifacts
      rm artifacts_$PROJECT_ID.zip
  artifacts:
    paths:
      - artifacts/**

compile-snap-desktop:
  extends: .compile
  image: alpine
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq
    - mkdir artifacts
  script:    
    - |
      PROJECT_ID=$(echo "$PROJECT_DESKTOP" | jq -r '.ID')
      TOKEN=$(echo "$PROJECT_DESKTOP" | jq -r '.TOKEN')      
      RESPONSE=$(curl -X POST --fail -F token=$TOKEN -F ref=$COMPILE_BRANCH https://gitlab.com/api/v4/projects/$PROJECT_ID/trigger/pipeline)
      echo "RESPONSE $RESPONSE"
      PIPELINE_ID=$(echo "$RESPONSE" | jq -r '.id')
      echo "Triggered pipeline $PIPELINE_ID for project $PROJECT_ID"
      while true; do        
        echo "Checking pipeline $PIPELINE_ID for project $PROJECT_ID..."
        STATUS=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID" | jq -r '.status')
        echo "Pipeline $PIPELINE_ID status: $STATUS"
        if [[ "$STATUS" == "success" ]]; then
          echo "Pipeline $PIPELINE_ID completed successfully!"
          break          
        elif [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
          echo "Pipeline $PIPELINE_ID failed or was canceled!"
          exit 1
        fi
        sleep 30     
      done
      echo "Fetching job list for pipeline $PIPELINE_ID in project $PROJECT_ID..."
      JOB_ID=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID/jobs" | jq -r '.[] | select(.name=="mvn-build" and .status=="success") | .id' | head -n 1)
      echo "Downloading artifacts from job $JOB_ID in project $PROJECT_ID..."
      curl --silent --location --output "artifacts_$PROJECT_ID.zip" --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/jobs/$JOB_ID/artifacts"
      unzip artifacts_$PROJECT_ID.zip "snap-application/target/*" -d artifacts
      unzip artifacts_$PROJECT_ID.zip "snap-main/target/*" -d artifacts
      unzip artifacts_$PROJECT_ID.zip "snap-smart-configurator-ui/src/main/resources/org/esa/snap/smart/configurator/ui/Performance32.png" -d artifacts
      rm artifacts_$PROJECT_ID.zip
  needs:
    - job: compile-snap-engine    
  artifacts:
    paths:
      - artifacts/**

compile-others-trigger-pipelines:
  extends: .compile
  image: alpine
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq
  script:
    - echo "Triggering pipelines for projects $PROJECT_IDS"
    - |
      for item in $(echo "$PROJECTS" | jq -c '.[]'); do
        PROJECT_ID=$(echo "$item" | jq -r '.ID')
        TOKEN=$(echo "$item" | jq -r '.TOKEN')
        RESPONSE=$(curl -X POST --fail -F token=$TOKEN -F ref=$COMPILE_BRANCH https://gitlab.com/api/v4/projects/$PROJECT_ID/trigger/pipeline)
        echo "RESPONSE $RESPONSE"
        PIPELINE_ID=$(echo "$RESPONSE" | jq -r '.id')
        echo "Triggered pipeline $PIPELINE_ID for project $PROJECT_ID"
        echo "$PROJECT_ID=$PIPELINE_ID" >> pipeline.env
      done
  needs:
    - job: compile-snap-engine
    - job: compile-snap-desktop
  artifacts:
    paths:
      - pipeline.env

compile-others-wait-for-pipelines:
  extends: .compile
  image: alpine
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq
  script:
    - echo "Waiting for pipelines to finish..."
    - |
      while true; do
        FINISHED=0        
        for item in $(echo "$PROJECTS" | jq -c '.[]'); do
          PROJECT_ID=$(echo "$item" | jq -r '.ID')
          PIPELINE_ID=$(grep "$PROJECT_ID=" pipeline.env | cut -d '=' -f2)
          echo "Checking pipeline $PIPELINE_ID for project $PROJECT_ID..."
          STATUS=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID" | jq -r '.status')
          echo "Pipeline $PIPELINE_ID status: $STATUS"
          if [[ "$STATUS" == "success" ]]; then
            echo "Pipeline $PIPELINE_ID completed successfully!"
            FINISHED=$(($FINISHED + 1))
          elif [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
            echo "Pipeline $PIPELINE_ID failed or was canceled!"
            exit 1
          fi          
        done
        PROJECTS_COUNT=$(echo "$PROJECTS" | jq 'length')
        echo "Projects: $PROJECTS_COUNT"
        echo "Finished: $FINISHED"
        if [ $FINISHED -eq $PROJECTS_COUNT ]; then 
          break
        else        
          sleep 30
        fi
      done
  needs:
    - job: compile-others-trigger-pipelines
  artifacts:
    paths:
      - pipeline.env

compile-others-fetch-artifacts:
  extends: .compile
  image: alpine
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq
    - mkdir artifacts
  script:
    - |
      for item in $(echo "$PROJECTS" | jq -c '.[]'); do
        PROJECT_ID=$(echo "$item" | jq -r '.ID')
        TOKEN=$(echo "$item" | jq -r '.TOKEN')
        PIPELINE_ID=$(grep "$PROJECT_ID=" pipeline.env | cut -d '=' -f2)
        echo "Fetching job list for pipeline $PIPELINE_ID in project $PROJECT_ID..."
        JOB_ID=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/pipelines/$PIPELINE_ID/jobs" | jq -r '.[] | select(.name=="mvn-build" and .status=="success") | .id' | head -n 1)
        echo "Downloading artifacts from job $JOB_ID in project $PROJECT_ID..."
        curl --silent --location --output "artifacts_$PROJECT_ID.zip" --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/projects/$PROJECT_ID/jobs/$JOB_ID/artifacts"
        if [[ "$TOKEN" == "$TRIGGER_TOKEN_MICROWAVE" ]]; then
          unzip artifacts_$PROJECT_ID.zip "microwavetbx-kit/target/netbeans_clusters/microwavetbx/*" -d artifacts
          unzip artifacts_$PROJECT_ID.zip "microwavetbx-kit/target/netbeans_clusters/rstb/*" -d artifacts
        fi
        if [[ "$TOKEN" == "$TRIGGER_TOKEN_OPTICAL" ]]; then
          unzip artifacts_$PROJECT_ID.zip "opttbx-kit/target/netbeans_clusters/opttbx/*" -d artifacts          
        fi
        if [[ "$TOKEN" == "$TRIGGER_TOKEN_ESA_SNAPPY" ]]; then
          unzip artifacts_$PROJECT_ID.zip "esasnappy-kit/target/nbm/netbeans/extra/*" -d artifacts          
        fi
        if [[ "$TOKEN" == "$TRIGGER_TOKEN_SMOS_BOX" ]]; then
          unzip artifacts_$PROJECT_ID.zip "smos-kit/target/netbeans_clusters/*" -d artifacts          
        fi
        rm artifacts_$PROJECT_ID.zip
      done
  needs:
    - job: compile-others-wait-for-pipelines
  artifacts:
    expire_in: 2 hours
    paths:
      - artifacts/**

# Fetch artifacts built at compile stage
build:
  stage: build
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    variables:
      MAVEN_CLI_OPTS: >-
        --no-transfer-progress
        --batch-mode
        --errors
        --fail-at-end
        --show-version
        -DdeployAtEnd=false
        -Denable.long.tests=true
    when: on_success
  # - if: $BRANCH
  #   variables:
  #     COMPILE_BRANCH: $BRANCH
  #   when: on_success
  - if: $RECOMPILE == "false"
    when: always
  - when: on_success
  needs:
    - job: compile-snap-engine
    - job: compile-snap-desktop
    - job: compile-others-fetch-artifacts
  script: 
    - | 
      mv artifacts/* .
      rmdir artifacts
  artifacts:
    expire_in: 2 hours
    paths:
      - LICENSE.html
      - etc
      - "${CI_PROJECT_DIR}/snap-application/target"
      - "${CI_PROJECT_DIR}/snap-main/target"
      - "${CI_PROJECT_DIR}/snap-smart-configurator-ui/src/main/resources/org/esa/snap/smart/configurator/ui/Performance32.png"
      - "${CI_PROJECT_DIR}/microwavetbx-kit/target/netbeans_clusters/microwavetbx"
      - "${CI_PROJECT_DIR}/microwavetbx-kit/target/netbeans_clusters/rstb"
      - "${CI_PROJECT_DIR}/opttbx-kit/target/netbeans_clusters/opttbx"
      - "${CI_PROJECT_DIR}/smos-kit/target/netbeans_clusters"
      - "${CI_PROJECT_DIR}/esasnappy-kit/target/nbm/netbeans/extra"

# Before building the image we need other projects artifacts  
docker-kaniko-build:
  needs:
    - job: build
      artifacts: true

# Triggers 3 GPT tests pipelines (linux,windows,macos)
gpt-tests:
  stage: gpt-tests
  image: curlimages/curl
  script:
    - |-
      curl -X POST --fail -F token=$TRIGGER_TOKEN_GPT_TESTS -F ref=$COMPILE_BRANCH -F "variables[SCOPE]=daily" -F "variables[PLATFORM]=linux" https://gitlab.com/api/v4/projects/43939974/trigger/pipeline &
      curl -X POST --fail -F token=$TRIGGER_TOKEN_GPT_TESTS -F ref=$COMPILE_BRANCH -F "variables[SCOPE]=daily" -F "variables[PLATFORM]=windows" https://gitlab.com/api/v4/projects/43939974/trigger/pipeline &
      curl -X POST --fail -F token=$TRIGGER_TOKEN_GPT_TESTS -F ref=$COMPILE_BRANCH -F "variables[SCOPE]=daily" -F "variables[PLATFORM]=darwin" https://gitlab.com/api/v4/projects/43939974/trigger/pipeline &
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  allow_failure: true

# Report on Github cf https://ecp-ci.gitlab.io/docs/guides/build-status-gitlab.html
.report-status:
  image: curlimages/curl
  variables:
    URL: "https://api.github.com/repos/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}"
    STATUS_NAME: snap-ci
  script:
    # For complete details on the GitHub API please see:
    # https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
    - |-
      curl -X POST $URL -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" -d '{"state": "'$CI_JOB_NAME'", "context": "'$STATUS_NAME'", "target_url": "'$CI_PIPELINE_URL'", "description": "Build snap docker image"}'
  environment:
    name: reporting-github
  dependencies: []
  retry: 2

pending:
  stage: .pre
  extends:
    - .report-status

success:
  stage: .post
  extends:
    - .report-status

failure:
  stage: .post
  extends:
    - .report-status
  rules:
    - when: on_failure
